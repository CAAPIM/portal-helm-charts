{{- if .Values.user.analyticsEnabled -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: broker
  labels:
    name: broker
spec:
  selector:
    matchLabels:
      name: broker
  serviceName: broker
  replicas: {{ .Values.broker.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1  
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        name: broker
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: name
                    operator: In
                    values:
                      - broker
              topologyKey: kubernetes.io/hostname
      containers:
        - name: broker
          image: "{{ .Values.image.portalRepository }}{{ .Values.image.broker }}"
          imagePullPolicy: "{{ .Values.broker.image.pullPolicy }}"
          envFrom:
          - configMapRef:
              name: broker-config
          readinessProbe:
            exec:
              command: [sh, /opt/diagnostic/health_check.sh]
            initialDelaySeconds: 90
            timeoutSeconds: 1
            periodSeconds: 15
            successThreshold: 1
          livenessProbe:
            exec:
              command: [sh, /opt/diagnostic/health_check.sh]
            initialDelaySeconds: 120
            timeoutSeconds: 1
            periodSeconds: 15
            successThreshold: 1
          ports:
            - containerPort: 8082
          resources:
            requests:
              memory: 1Gi
            limits:
              memory: 2Gi
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
      - name: "{{ .Values.image.pullSecrets }}"
      {{- end }}
      dnsPolicy: "{{ .Values.broker.dnsPolicy }}"
      restartPolicy: Always
      terminationGracePeriodSeconds: 60
{{- end -}}