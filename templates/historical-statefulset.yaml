{{- if .Values.user.analyticsEnabled -}}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: historical
  labels:
    name: historical
spec:
  selector:
    matchLabels:
      name: historical
  serviceName: historical
  replicas: {{ .Values.historical.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1  
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        name: historical
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: name
                    operator: In
                    values:
                      - historical
              topologyKey: kubernetes.io/hostname
      securityContext:
        fsGroup: 1010
      containers:
        - name: historical
          image: "{{ .Values.image.portalRepository }}{{ .Values.image.historical }}"
          imagePullPolicy: "{{ .Values.historical.image.pullPolicy }}"
          envFrom:
          - configMapRef:
              name: historical-config
          - secretRef:
              name: historical-secret
          readinessProbe:
            exec:
              command: [sh, /opt/diagnostic/health_check.sh]
            initialDelaySeconds: 90
            timeoutSeconds: 1
            periodSeconds: 15
            successThreshold: 1
          livenessProbe:
            exec:
              command: [sh, /opt/diagnostic/health_check.sh]
            initialDelaySeconds: 120
            timeoutSeconds: 1
            periodSeconds: 15
            successThreshold: 1
          ports:
            - containerPort: 8083
          resources:
            requests:
              memory: 2Gi
            limits:
              memory: 2Gi
          volumeMounts:
          - name: historical-vol-claim
            mountPath: /var/druid/segments
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
      - name: "{{ .Values.image.pullSecrets }}"
      {{- end }}
      dnsPolicy: "{{ .Values.historical.dnsPolicy }}"
      restartPolicy: Always
      terminationGracePeriodSeconds: 60
  volumeClaimTemplates:
  - metadata:
      name: historical-vol-claim
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "{{ .Values.persistence.storage.name }}"
      resources:
        requests:
            storage: {{ .Values.persistence.storage.historical }}
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
      - name: "{{ .Values.image.pullSecrets }}"
      {{- end }}
      dnsPolicy: "{{ .Values.historical.dnsPolicy }}"
      restartPolicy: Always
      terminationGracePeriodSeconds: 60
{{- end -}}
