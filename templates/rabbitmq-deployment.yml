apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  labels:
    name: rabbitmq
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  replicas: {{ .Values.rabbitmq.replicaCount }}
  selector:
    matchLabels:
      name: rabbitmq
  template:
    metadata:
      labels:
        name: rabbitmq
    spec:
      containers:
        - name: rabbitmq
          image: "{{ .Values.image.portalRepository }}{{ .Values.image.rabbitmq }}"
          imagePullPolicy: "{{ .Values.rabbitmq.image.pullPolicy }}"
          envFrom:
          - configMapRef:
              name: rabbitmq-config
          readinessProbe:
            exec:
              command: ["sh", "/opt/rabbit/health_check.sh"]
            failureThreshold: 6
            initialDelaySeconds: 10
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
          livenessProbe:
            exec:
              command: ["sh", "/opt/rabbit/health_check.sh"]
            failureThreshold: 6
            initialDelaySeconds: 10
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
          ports:
            - containerPort: 4369
            - containerPort: 5671
            - containerPort: 5672
            - containerPort: 15672
            - containerPort: 1883
            - containerPort: 25672
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 1000m
              memory: 1024Mi
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
      - name: "{{ .Values.image.pullSecrets }}"
      {{- end }}
      dnsPolicy: "{{ .Values.rabbitmq.dnsPolicy }}"
      restartPolicy: Always
      terminationGracePeriodSeconds: 60
